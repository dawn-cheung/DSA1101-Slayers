PLEASE = hello %>% #outliers for those with diabetes
filter(diabetes == 1) %>%
select(bmi)
OHHH = hello %>% #outliers for those without diabetes
filter(diabetes == 0) %>%
select(bmi)
meed = hello %>% #median for those with diabetes
filter(diabetes == 1) %>%
select(bmi)
meed = median(unlist(meed))
weed = hello %>% #median for those without diabetes
filter(diabetes == 0) %>%
select(bmi)
weed = median(unlist(weed))
meed;weed
length(unlist(PLEASE))
length(unlist(OHHH))
length(bmie$out)
boxplot(bmi ~ diabetes, xlab = "diabetes", col = "blue")
bmie = boxplot(bmi ~ diabetes, xlab = "diabetes", col = "blue")
hello = data[which(bmi %in% bmie$out),]
PLEASE = hello %>% #outliers for those with diabetes
filter(diabetes == 1) %>%
select(bmi)
OHHH = hello %>% #outliers for those without diabetes
filter(diabetes == 0) %>%
select(bmi)
meed = data %>% #median for those with diabetes
filter(diabetes == 1) %>%
select(bmi)
meed = median(unlist(meed))
weed = data %>% #median for those without diabetes
filter(diabetes == 0) %>%
select(bmi)
weed = median(unlist(weed))
meed;weed
length(unlist(PLEASE))
length(unlist(OHHH))
length(bmie$out)
hist(HbA1c_level)
boxplot(HbA1c_level ~ diabetes, xlab = "diabetes", col = "blue")
#CONTINUOUS: blood_glucose_level
hist(blood_glucose_level)
boxplot(blood_glucose_level ~ diabetes, xlab = "diabetes", col = "blue")
weed = data %>% #median for those without diabetes
filter(HbA1c_level == 5) %>%
select(bmi)
weed
weed = data %>% #median for those without diabetes
filter(HbA1c_level == 5.5) %>%
select(bmi)
weed
weed = data %>% #median for those without diabetes
filter(HbA1c_level == 5.4) %>%
select(bmi)
weed
hist(HbA1c_level)
boxplot(HbA1c_level ~ diabetes, xlab = "diabetes", col = "blue")
meed = data %>% #median for those with diabetes
filter(diabetes == 1) %>%
select(HbA1c_level)
meed = median(unlist(meed))
weed = data %>% #median for those without diabetes
filter(diabetes == 0) %>%
select(HbA1c_level)
weed = median(unlist(weed))
meed;weed
hist(blood_glucose_level)
boxplot(blood_glucose_level ~ diabetes, xlab = "diabetes", col = "blue")
meed = data %>% #median for those with diabetes
filter(diabetes == 1) %>%
select(blood_glucose_level)
meed = median(unlist(meed))
weed = data %>% #median for those without diabetes
filter(diabetes == 0) %>%
select(blood_glucose_level)
weed = median(unlist(weed))
meed;weed
debugSource("~/GitHub/DSA1101 Slayers/Statistical Report Materials (Assignment 2)/A0286548L.R", echo=TRUE)
confusion.matrix
test.Y = data[-train_index, 9]
source("~/GitHub/DSA1101 Slayers/Statistical Report Materials (Assignment 2)/A0286548L.R", echo=TRUE)
accuracy = append(sum(diag(confusion.matrix))/sum(confusion.matrix))
sum(diag(confusion.matrix)
)
sum(confusion.matrix)
sum(diag(confusion.matrix))/sum(confusion.matrix)
append(sum(diag(confusion.matrix))/sum(confusion.matrix))
source("~/GitHub/DSA1101 Slayers/Statistical Report Materials (Assignment 2)/A0286548L.R", echo=TRUE)
plot(accuracy, FPR_KNN)
plot(accuracy, FNR_KNN)
predKNN <- knn(train.X, test.X, train.Y, k=35)
confusion.matrix = table(predKNN, test.Y); confusion.matrix
accuracy = sum(diag(confusion.matrix))/sum(confusion.matrix)
FPR_KNN = confusion.matrix[2,1]/(confusion.matrix[2,1]+confusion.matrix[1,1])
FNR_KNN = confusion.matrix[1,2]/(confusion.matrix[2,2]+confusion.matrix[1,2])
accuracy
FPR_KNN
FNR_KNN
predKNN <- knn(train.X, test.X, train.Y, k=30)
confusion.matrix = table(predKNN, test.Y); confusion.matrix
accuracy = c()
FPR_KNN = c()
FNR_KNN = c()
for (i in c(20, 30, 40, 50, 100, 200, 300, 350)){ #total train is like 8000
predKNN <- knn(train.X, test.X, train.Y, k=i) # KNN with k = 15,..., 8000
confusion.matrix = table(test.Y, predKNN); confusion.matrix
accuracy = append(accuracy, sum(diag(confusion.matrix))/sum(confusion.matrix))
FPR_KNN = append(FPR_KNN, confusion.matrix[2,1]/(confusion.matrix[2,1]+confusion.matrix[1,1]))
FNR_KNN = append(FNR_KNN, confusion.matrix[1,2]/(confusion.matrix[2,2]+confusion.matrix[1,2]))
print(accuracy)
}
FPR_KNN
FNR_KNN
accuracy
pred.knn= knn(train.X, test.X, train.y, k = 30, prob=TRUE)
pred.knn= knn(train.X, test.X, train.Y, k = 30, prob=TRUE)
pred.prob <- attr(pred.knn, "prob")
helppain = prediction(pred.prob, actual.class)
helppain = prediction(pred.prob, test.Y)
rocObjKNN = performance(helppain, measure = "tpr", x.measure = "fpr")
plot(rocObjKNN, lwd =2)
abline(a=0, b=1, col ="blue", lty =3)
#getting AUC value for KNN
aucKNN = performance(preObjKNN, measure = "auc")
pred.knn= knn(train.X, test.X, train.Y, k = 30, prob=TRUE)
pred.prob <- attr(pred.knn, "prob")
helppain = prediction(pred.prob, test.Y)
rocObjKNN = performance(helppain, measure = "tpr", x.measure = "fpr")
plot(rocObjKNN, lwd =2)
abline(a=0, b=1, col ="blue", lty =3)
#getting AUC value for KNN
aucKNN = performance(helppain, measure = "auc")
aucKNN@y.values[[1]]
plot(rocObjKNN, add = TRUE, col = "green")
source("~/GitHub/DSA1101 Slayers/Statistical Report Materials (Assignment 2)/A0286548L.R", echo=TRUE)
pred.prob <- attr(pred.knn, "prob")
helppain = prediction(test.Y, pred.prob)
pred.prob
hist(pred.prob)
library(tidyverse)
library(dplyr)
library(class)
library(rpart)
library(rpart.plot)
library(e1071)
library(ROCR)
library(fastDummies)
set.seed(1101)
data = read.csv("~/Github/DSA1101 Slayers/datasets/diabetes-dataset.csv")
glimpse(data)
data$gender = as.factor(data$gender)
data$hypertension = as.factor(data$hypertension)
data$heart_disease = as.factor(data$heart_disease)
data$smoking_history = as.factor(data$smoking_history)
data$diabetes = as.factor(data$diabetes)
glimpse(data)
attach(data)
data[,c("age", "bmi", "HbA1c_level", "blood_glucose_level")] = scale(data[,c("age", "bmi", "HbA1c_level", "blood_glucose_level")])
pred.knn= knn(train.X, test.X, train.Y, k = 30, prob=TRUE)
data = dummy_cols(data, select_columns = c("gender", "smoking_history"))
#gender_male, gender_female, gender_other
#smoking_history_current, smoking_history_ever smoking_history_former, smoking_history_never, smoking_history_not current, smoking_history_No Info
data$hypertension = c(0, 1)[data$hypertension]
data$heart_disease = c(0, 1)[data$heart_disease]
attach(data)
train.X = data[train_index, c(3,4,6,7,8,10,11,12,13,14,15,16,17,18)]
no_rows = as.numeric(nrow(data))
train_index = sample(1:no_rows, size = (no_rows*0.8))
data = dummy_cols(data, select_columns = c("gender", "smoking_history"))
#gender_male, gender_female, gender_other
#smoking_history_current, smoking_history_ever smoking_history_former, smoking_history_never, smoking_history_not current, smoking_history_No Info
data$hypertension = c(0, 1)[data$hypertension]
pred.knn= knn(train.X, test.X, train.Y, k = 30, prob=TRUE)
attach(data)
train.X = data[train_index, c(3,4,6,7,8,10,11,12,13,14,15,16,17,18)]
train.Y = data[train_index, 9]
test.X = data[-train_index, c(3,4,6,7,8,10,11,12,13,14,15,16,17,18)]
test.Y = data[-train_index, 9]
pred.knn= knn(train.X, test.X, train.Y, k = 30, prob=TRUE)
pred.prob <- attr(pred.knn, "prob")
helppain = prediction(pred.prob, test.Y)
rocObjKNN = performance(helppain, measure = "tpr", x.measure = "fpr")
plot(rocObjKNN, lwd =2)
abline(a=0, b=1, col ="blue", lty =3)
#getting AUC value for KNN
aucKNN = performance(helppain, measure = "auc")
aucKNN@y.values[[1]]
plot(rocObjKNN, add = TRUE, col = "green")
source("~/GitHub/DSA1101 Slayers/Statistical Report Materials (Assignment 2)/A0286548L.R", echo=TRUE)
install.package("arules");
library(tidyverse)
install.package("arules")
install.packages("arules")
install.packages("arulesViz")
install.packages("arulesViz")
knitr::opts_chunk$set(echo = TRUE)
library("arules")
library("arulesViz")
data(Groceries)
?Groceries
#P now has A and B
centriodP = c((1+1.5)/2, (1+2)/2)
plot(objs)
##not possible to do via kmeans() => use plot() mnaually
objs = cbind(x1 = c(1, 1.5, 3, 3.5, 4.5), x2 = c(1, 2, 4, 5, 5))
plot(objs)
text(1.1, 1.1, "A")
text(1.6, 2.2, "B")
text(3.1, 4.1, "C")
text(3.63, 5, "D")
text(4.35, 5, "E")
text(2,2,"P")
text(4,4,"Q")
###so now you can see quite clearly which points are nearer to which centroids
##tho u can also calculate using Euclidean distance
plot(objs)
point(centriodP, pch = 10, col = "green")
#P now has A and B
centriodP = c((1+1.5)/2, (1+2)/2)
#Q now has C, D, E
centriodQ = c((3+3.5+4.5)/2, (4+5+5)/2)
centriodP; centriodQ
plot(objs)
point(centriodP, pch = 10, col = "green")
plot(objs)
points(centriodP, pch = 10, col = "green")
points(centriodQ, pch = 10, col = "green")
#P now has A and B
centriodP = c((1+1.5)/2, (1+2)/2)
#Q now has C, D, E
centriodQ = c((3+3.5+4.5)/3, (4+5+5)/3)
#im more or less literally doing averages btw
centriodP; centriodQ
plot(objs)
points(centriodP, pch = 10, col = "green")
points(centriodQ, pch = 10, col = "green")
#P now has A and B
centriodP = c((1+1.5)/2, (1+2)/2)
#Q now has C, D, E
centriodQ = c((3+3.5+4.5)/3, (4+5+5)/3)
#im more or less literally doing averages btw
#but note that we're finding the MIDPOINT of all the points belonging to the different clusters
#and previous proposed centriods (not part of OG dataset) is removed / not considered
centriodP; centriodQ
data = data.frame(x1, x2)
##not possible to do via kmeans() => use plot() mnaually
objs = cbind(x1 = c(1, 1.5, 3, 3.5, 4.5), x2 = c(1, 2, 4, 5, 5))
plot(objs)
text(1.1, 1.1, "A")
text(1.6, 2.2, "B")
text(3.1, 4.1, "C")
text(3.63, 5, "D")
text(4.35, 5, "E")
text(2,2,"P")
text(4,4,"Q")
###so now you can see quite clearly which points are nearer to which centroids
##tho u can also calculate using Euclidean distance
data = data.frame(x1, x2)
##not possible to do via kmeans() => use plot() mnaually
x1 = c(1, 1.5, 3, 3.5, 4.5)
x2 = c(1, 2, 4, 5, 5)
objs = cbind(x1, x2)
plot(objs)
text(1.1, 1.1, "A")
text(1.6, 2.2, "B")
text(3.1, 4.1, "C")
text(3.63, 5, "D")
text(4.35, 5, "E")
text(2,2,"P")
text(4,4,"Q")
###so now you can see quite clearly which points are nearer to which centroids
##tho u can also calculate using Euclidean distance
data = data.frame(x1, x2)
data = data.frame(x1, x2)
data
kout = kmeans(data, centers = 2)
plot(kout)
data = data.frame(x1, x2)
data
kout = kmeans(data, centers = 2)
kout
kout$withinss
kout$tot.withinss
knitr::opts_chunk$set(echo = TRUE)
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
sendhelp
data = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
K = 15
wss <- numeric(K)
for (k in 1:K) {
wss[k] <- sum(kmeans(scale(data[,c("floor_area_sqm","resale_price")]), centers=k)$withinss)
}
plot(1:K, wss, col = "blue", type="b", xlab="Number of Clusters",  ylab="Within Sum of Squares")
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
attach(sendhelp)
senddf = data.frame(resale_price, floor_area_sqm)
standardised.X = scale(senddf)
skibbidi = c() #putting all the wss here
for (i in 1:10) {
kout = kmeans(senddf, centers = i)
skibbidi = c(skibbidi, kout$withinss)
}
plot(skibbidi)
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
attach(sendhelp)
senddf = data.frame(resale_price, floor_area_sqm)
standardised.X = scale(senddf)
skibbidi = c() #putting all the wss here
for (i in 1:10) {
kout = kmeans(senddf, centers = i)
skibbidi = c(skibbidi, kout$withinss)
}
plot(1:10, skibbidi)
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
attach(sendhelp)
senddf = data.frame(resale_price, floor_area_sqm)
standardised.X = scale(senddf)
skibbidi = c() #putting all the wss here
for (i in 1:10) {
kout = kmeans(senddf, centers = i)
skibbidi = c(skibbidi, kout$withinss)
}
plot(1:10, skibbidi)
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
attach(sendhelp)
senddf = data.frame(resale_price, floor_area_sqm)
standardised.X = scale(senddf)
skibbidi = c() #putting all the wss here
for (i in 1:10) {
kout = kmeans(senddf, centers = i)
skibbidi = c(skibbidi, kout$withinss)
skibbidi
}
#plot(1:10, skibbidi)
knitr::opts_chunk$set(echo = TRUE)
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
attach(sendhelp)
senddf = data.frame(resale_price, floor_area_sqm)
standardised.X = scale(senddf)
skibbidi = c() #putting all the wss here
for (i in 1:10) {
kout = kmeans(senddf, centers = i)
skibbidi = c(skibbidi, kout$withinss)
print(skibbidi)
}
#plot(1:10, skibbidi)
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
attach(sendhelp)
senddf = data.frame(resale_price, floor_area_sqm)
standardised.X = scale(senddf)
skibbidi = c() #putting all the wss here
for (i in 1:10) {
kout = kmeans(standardised.X, centers = i)
skibbidi = c(skibbidi, kout$withinss)
print(skibbidi)
}
#plot(1:10, skibbidi)
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
attach(sendhelp)
senddf = data.frame(resale_price, floor_area_sqm)
standardised.X = scale(senddf)
skibbidi = c() #putting all the wss here
for (i in 1:10) {
kout = kmeans(standardised.X, centers = i)
skibbidi[i] = kout$withinss
print(skibbidi)
}
#plot(1:10, skibbidi)
K = 15
wss <- numeric(K)
for (k in 1:K) {
wss[k] <- sum(kmeans(scale(data[,c("floor_area_sqm","resale_price")]), centers=k)$withinss)
}
data = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
dim(data)
names(data)
attach(data)
plot(floor_area_sqm, resale_price, pch = 20)
#########  IT IS RECOMMENDED TO STANDARDIZE THE INPUT FEATURES BEFORE K-MEANS
# PLOT WSS vs K TO PICK OPTIMAL K:
K = 15
wss <- numeric(K)
for (k in 1:K) {
wss[k] <- sum(kmeans(scale(data[,c("floor_area_sqm","resale_price")]), centers=k)$withinss)
}
plot(1:K, wss, col = "blue", type="b", xlab="Number of Clusters",  ylab="Within Sum of Squares")
# k=3 might be a good choice.
library("arules")
library("arulesViz")
data(Groceries) #alr installed in R library arules; everyone can access it
#sparse matrix: specifically for association rules, stored in a dot and slash format
inspect(head(Groceries))
inspect(head(Groceries, 10))
library("arules")
library("arulesViz")
data(Groceries) #alr installed in R library arules; everyone can access it
#sparse matrix: specifically for association rules, stored in a dot and slash format
summary(Groceries)
inspect(head(Groceries)) #inspect is under library arules
inspect(head(Groceries, 10)) #inspect first 10 itemsets instead of first 6
Groceries@itemInfo[1:10]
##   [1,] . . . | . . . . . . .
##   [2,] . . | . | . . . . . .
##   [3,] . . . . . . . . . . .
##   [4,] . . . . . . . . . . .
##   [5,] . . . . . . . . . . .
##   [6,] . . . . . . . . . . .
##   [7,] . . . . . . . . . . .
##   [8,] . . . . . . . . . . .
##   [9,] . . . . . . . . . . .
##  [10,] . . | . . . . . . . .
##  [11,] . . . . . . . | . . .
##  [12,] . . . . . . . . . . .
##  [13,] . . . . . . . . . . .
##  [14,] | . . . . . . | . . .
##  [15,] | . . . . . . . . . |
apply(Groceries@data[,1:5], 2,
function(r) paste(Groceries @itemInfo[r, "labels"], collapse = ", "))
plot(resale_price, floor_area_sqm)
plot(resale_price, floor_area_sqm)
wss <- numeric(K)
wss
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
attach(sendhelp)
plot(floor_area_sqm, resale_price)#so we notice that the resale price is damnn high compared to the floor_area_sqm => MUST SCALE FEATURES
senddf = data.frame(resale_price, floor_area_sqm)
standardised.X = scale(senddf) #REMEMBER TO SCALE DATA IF NOT WSS GONNA BE DAMN WEIRD
skibbidi = c() #putting all the wss here
for (i in 1:15) {
kout = kmeans(standardised.X, centers = i)
skibbidi[i] = sum(kout$withinss)
}
plot(1:15, skibbidi, type = "b")
skibbidi = c() #putting all the wss here
for (i in 1:15) {
skibbidi[i] = sum(kmeans(scale(data[,c("floor_area_sqm", "resale_price")]), centers = i)$withinss)
}
plot(1:15, skibbidi, type = "b")
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
attach(sendhelp)
plot(floor_area_sqm, resale_price)#so we notice that the resale price is damnn high compared to the floor_area_sqm => MUST SCALE FEATURES
senddf = data.frame(resale_price, floor_area_sqm)
standardised.X = scale(senddf) #REMEMBER TO SCALE DATA IF NOT WSS GONNA BE DAMN WEIRD
skibbidi = c() #putting all the wss here
for (i in 1:15) {
kout = kmeans(standardised.X, centers = i)
skibbidi[i] = sum(kout$withinss)
}
plot(1:15, skibbidi, type = "b")
skibbidi = c() #putting all the wss here
for (i in 1:15) {
skibbidi[i] = sum(kmeans(scale(data[,c("floor_area_sqm", "resale_price")]), centers = i)$withinss)
}
plot(1:15, skibbidi, type = "b")
for (i in 1:15) {
skibbidi[i] = sum(kmeans(scale(data[,c("floor_area_sqm","resale_price")]), centers=k)$withinss)
}
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
attach(sendhelp)
plot(floor_area_sqm, resale_price)#so we notice that the resale price is damnn high compared to the floor_area_sqm => MUST SCALE FEATURES
senddf = data.frame(resale_price, floor_area_sqm)
standardised.X = scale(senddf) #REMEMBER TO SCALE DATA IF NOT WSS GONNA BE DAMN WEIRD
skibbidi = c() #putting all the wss here
for (i in 1:15) {
kout = kmeans(standardised.X, centers = i)
skibbidi[i] = sum(kout$withinss)
}
plot(1:15, skibbidi, type = "b")
skibbidi = c() #putting all the wss here
for (i in 1:15) {
skibbidi[i] = sum(kmeans(scale(data[,c("floor_area_sqm","resale_price")]), centers=k)$withinss)
}
plot(1:15, skibbidi, type = "b")
knitr::opts_chunk$set(echo = TRUE)
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
attach(sendhelp)
plot(floor_area_sqm, resale_price)#so we notice that the resale price is damnn high compared to the floor_area_sqm => MUST SCALE FEATURES
skibbidi = c() #putting all the wss here
for (i in 1:15) {
skibbidi[i] = sum(kmeans(scale(data[,c("floor_area_sqm","resale_price")]), centers=k)$withinss)
}
plot(1:15, skibbidi, type = "b")
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
attach(sendhelp)
plot(floor_area_sqm, resale_price)#so we notice that the resale price is damnn high compared to the floor_area_sqm => MUST SCALE FEATURES
skibbidi = c() #putting all the wss here
for (i in 1:15) {
skibbidi[i] = sum(kmeans(scale(data[,c("floor_area_sqm","resale_price")]), centers=i)$withinss)
}
plot(1:15, skibbidi, type = "b")
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
attach(sendhelp)
plot(floor_area_sqm, resale_price)#so we notice that the resale price is damnn high compared to the floor_area_sqm => MUST SCALE FEATURES
skibbidi = c() #putting all the wss here
for (i in 1:15) {
skibbidi[i] = sum(kmeans(scale(data[,c("floor_area_sqm","resale_price")]), centers=i)$withinss)
}
sendhelp = read.csv("~/Github/DSA1101 Slayers/datasets/hdb-2012-to-2014.csv")
attach(sendhelp)
plot(floor_area_sqm, resale_price)#so we notice that the resale price is damnn high compared to the floor_area_sqm => MUST SCALE FEATURES
skibbidi = c() #putting all the wss here
for (i in 1:15) {
skibbidi[i] = sum(kmeans(scale(sendhelp[,c("floor_area_sqm","resale_price")]), centers=i)$withinss)
}
plot(1:15, skibbidi, type = "b")
kdata = scale(sendhelp[, c("floor_area_sqm","resale_price")])
wss = numeric(15)
for (i in 1:15) {
wss[i] = sum(kmeans(kdata, centers = i)$withinss)
}
plot(1:15, wss[i], type = "b")
