library(tidyverse)
data = read.csv("~/Github/DSA1101 Slayers/datasets/Titanic.csv")
glimpse(data)
data$Survived = as.factor(data$Survived)
dist(data$Age)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data = read.csv("~/Github/DSA1101 Slayers/datasets/Titanic.csv")
glimpse(data)
data$Survived = as.factor(data$Survived)
data$Sex = as.factor(data$Sex)
data$Class = as.factor(data$Class)
attach(data)
prop.table(table(Survived))
ProbY1 = prop.table(table(Survived))[[1]] #double bracket to remove the column name
ProbY0 = prop.table(table(Survived))[[2]]
ProbY1
ProbY0
#P(Xi = xi |Y = 1) = P(class = 3rd)
dist(Class)
dist(Sex)
dist(Age)
library(tidyverse)
data = read.csv("~/Github/DSA1101 Slayers/datasets/Titanic.csv")
glimpse(data)
data$Survived = as.factor(data$Survived)
data$Sex = as.factor(data$Sex)
data$Class = as.factor(data$Class)
attach(data)
prop.table(table(Survived))
ProbY1 = prop.table(table(Survived))[[1]] #double bracket to remove the column name
ProbY0 = prop.table(table(Survived))[[2]]
ProbY1
ProbY0
View(data)
#P(Xi = xi |Y = 1) = P(class = 3rd)
which(Class = "3rd")
#P(Xi = xi |Y = 1) = P(class = 3rd)
which(Class == "3rd")
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = table(Class)
s = table(Sex)
a = table(Age)
rbind(c,s,a)
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = table(Class)
s = table(Sex)
a = table(Age)
cbind(c,s,a)
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = table(Class, Sex, Age)
c
s = table(Sex, Survived); s
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = table(Class, Survived); c
s = table(Sex, Survived); s
a = table(Age, Survived); a
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = prop.table(table(Class, Survived)); c
s = prop.table(table(Sex, Survived)); s
a = prop.table(table(Age, Survived)); a
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = prop.table(table(Class, Survived), "P(Class = xi |Y = 1)", "P(Class = xi |Y = 0)"); c
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = prop.table(table(Class, Survived), "P(Class = xi |Y = 1)"); c
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = prop.table(table(Class, Survived)); c
s = prop.table(table(Sex, Survived)); s
a = prop.table(table(Age, Survived)); a
#P(Xi = xi |Y = 1)
Y1ting = cbind(c[1],s[1],a[1])
rownames(Y1ting) <- c("P(Xi = xi |Y = 1)")
Y1ting = cbind(c[2],s[2],a[2])
rownames(Y1ting) <- c("P(Xi = xi |Y = 0)")
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = prop.table(table(Class, Survived)); c
s = prop.table(table(Sex, Survived)); s
a = prop.table(table(Age, Survived)); a
#P(Xi = xi |Y = 1)
Y1ting = cbind(c[1],s[1],a[1])
rownames(Y1ting) <- c("P(Xi = xi |Y = 0)") #since no is the first column
#P(Xi = xi |Y = 0)
Y2ting = cbind(c[2],s[2],a[2])
rownames(Y1ting) <- c("P(Xi = xi |Y = 1)")
Y1ting
library(tidyverse)
data = read.csv("~/Github/DSA1101 Slayers/datasets/Titanic.csv")
glimpse(data)
data$Survived = as.factor(data$Survived)
data$Sex = as.factor(data$Sex)
data$Class = as.factor(data$Class)
attach(data)
prop.table(table(Survived))
ProbY1 = prop.table(table(Survived))[[1]] #double bracket to remove the column name
ProbY0 = prop.table(table(Survived))[[2]]
ProbY1
ProbY0
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = prop.table(table(Class, Survived)); c
s = prop.table(table(Sex, Survived)); s
a = prop.table(table(Age, Survived)); a
#P(Xi = xi |Y = 1)
Y1ting = cbind(c[1],s[1],a[1])
rownames(Y1ting) <- c("P(Xi = xi |Y = 0)") #since no is the first column
#P(Xi = xi |Y = 0)
Y2ting = cbind(c[2],s[2],a[2])
rownames(Y1ting) <- c("P(Xi = xi |Y = 1)")
Y1ting
Y2ting
library(tidyverse)
data = read.csv("~/Github/DSA1101 Slayers/datasets/Titanic.csv")
glimpse(data)
data$Survived = as.factor(data$Survived)
data$Sex = as.factor(data$Sex)
data$Class = as.factor(data$Class)
attach(data)
prop.table(table(Survived))
ProbY1 = prop.table(table(Survived))[[1]] #double bracket to remove the column name
ProbY0 = prop.table(table(Survived))[[2]]
ProbY1
ProbY0
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = prop.table(table(Class, Survived)); c
s = prop.table(table(Sex, Survived)); s
a = prop.table(table(Age, Survived)); a
#P(Xi = xi |Y = 1)
Y1ting = cbind(c[1],s[1],a[1])
colnames(Y1ting) <- c("P(Xi = xi |Y = 0)") #since no is the first column
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = prop.table(table(Class, Survived)); c
s = prop.table(table(Sex, Survived)); s
a = prop.table(table(Age, Survived)); a
#P(Xi = xi |Y = 1)
Y1ting = cbind(c[,1],s[,1],a[,1])
colnames(Y1ting) <- c("P(Xi = xi |Y = 0)") #since no is the first column
View(data)
View(Y1ting)
colnames(Y1ting)  = "P(Xi = xi |Y = 0)" #since no is the first column
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = prop.table(table(Class, Survived)); c
s = prop.table(table(Sex, Survived)); s
a = prop.table(table(Age, Survived)); a
#P(Xi = xi |Y = 1)
Y1ting = rbind(c[,1],s[,1],a[,1])
colnames(Y1ting)  = "P(Xi = xi |Y = 0)" #since no is the first column
View(Y1ting)
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = prop.table(table(Class, Survived)); c
s = prop.table(table(Sex, Survived)); s
a = prop.table(table(Age, Survived)); a
#P(Xi = xi |Y = 1)
#Y1ting = rbind(c[,1],s[,1],a[,1])
#colnames(Y1ting)  = "P(Xi = xi |Y = 0)" #since no is the first column
#P(Xi = xi |Y = 0)
#Y2ting = rbind(c[,2],s[,2],a[,2])
#colnames(Y2ting) <- c("P(Xi = xi |Y = 1)")
#Y1ting
#Y2ting
c[[2,2]]
knitr::opts_chunk$set(echo = TRUE)
library("e1071")
model <- naiveBayes(Survived ~ Age + Sex + Class, data)#, laplace=0)
newdata = cbind(Age = "Adult", Sex = "Female", Class = "2nd")
predict(model, newdata = newdata, type = "class")
Yum + NotYum
#do NB first
nb_prediction = predict(M1,
newdata = data[,ncol(Survived)],
type = "raw")
library(ROCR)
#do NB first
nb_prediction = predict(M1,
newdata = data[,ncol(Survived)],
type = "raw")
#P(Y = survive |Age = Adult, Sex = Female, Class = 2nd)
Yum = ProbY1 * c[[2,2]] * s[[1,2]] * s[[1,2]]
library(tidyverse)
data = read.csv("~/Github/DSA1101 Slayers/datasets/Titanic.csv")
glimpse(data)
data$Survived = as.factor(data$Survived)
data$Sex = as.factor(data$Sex)
data$Class = as.factor(data$Class)
attach(data)
prop.table(table(Survived))
ProbY1 = prop.table(table(Survived))[[1]] #double bracket to remove the column name
ProbY0 = prop.table(table(Survived))[[2]]
ProbY1
ProbY0
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = prop.table(table(Class, Survived)); c
s = prop.table(table(Sex, Survived)); s
a = prop.table(table(Age, Survived)); a
#P(Xi = xi |Y = 1)
#Y1ting = rbind(c[,1],s[,1],a[,1])
#colnames(Y1ting)  = "P(Xi = xi |Y = 0)" #since no is the first column
#P(Xi = xi |Y = 0)
#Y2ting = rbind(c[,2],s[,2],a[,2])
#colnames(Y2ting) <- c("P(Xi = xi |Y = 1)")
#Y1ting
#Y2ting
#P(Y = survive |Age = Adult, Sex = Female, Class = 2nd)
Yum = ProbY1 * c[[2,2]] * s[[1,2]] * s[[1,2]]
NotYum = ProbY0 * c[[2,1]] * s[[1,1]] * s[[1,1]]
if (Yum > NotYum) {
print("more likely to survive")
} else {
print("death is inevitable")
}
library("e1071")
M1 <- naiveBayes(Survived ~ Age + Sex + Class, data)#, laplace=0)
newdata = cbind(Age = "Adult", Sex = "Female", Class = "2nd")
predict(M1, newdata = newdata, type = "class")
#prediction is the sameeeee
library(rpart)
library(rpart.plot)
M2 <- rpart(Survived ~ Age + Sex + Class,
method = "class",
data = data,
control = rpart.control(minsplit = 1),
parms = list(split = "information"))
rpart.plot(M2, type = 4, extra = 2, clip.right.labs = FALSE)
library(ROCR)
#do NB first
nb_prediction = predict(M1,
newdata = data[,ncol(Survived)],
type = "raw")
dt_prediction = predict(M2,
newdata = data[,ncol(Survived)],
type = "raw")
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
library(rpart.plot)
M2 <- rpart(Survived ~ Age + Sex + Class,
method = "class",
data = data,
control = rpart.control(minsplit = 1),
parms = list(split = "information"))
M2
library(rpart)
library(rpart.plot)
M2 <- rpart(Survived ~ Age + Sex + Class,
method = "class",
data = data,
control = rpart.control(minsplit = 1),
parms = list(split = "information"))
summary(M2)
data[,ncol(Survived)]
ncol(Survived)
library(tidyverse)
data = read.csv("~/Github/DSA1101 Slayers/datasets/Titanic.csv")
glimpse(data)
data$Survived = as.factor(data$Survived)
data$Sex = as.factor(data$Sex)
data$Class = as.factor(data$Class)
attach(data)
prop.table(table(Survived))
ProbY1 = prop.table(table(Survived))[[1]] #double bracket to remove the column name
ProbY0 = prop.table(table(Survived))[[2]]
ProbY1
ProbY0
ncol(Survived)
data[,ncol(data)]
ncol(data)
library(dplyr)
library(ROCR)
ncol(data)
data[,ncol(data)] %>% #this literally means get the last row of the data. damn.
slice(1:8)
library(dplyr)
library(ROCR)
ncol(data)
data[,ncol(data)] %>% #this literally means get the last row of the data. damn.
split(1:8)
#do NB first
nb_prediction = predict(M1,
newdata = data[,ncol(data)],
type = "raw")
library(dplyr)
library(ROCR)
ncol(data)
data[,ncol(data)] %>% #this literally means get the last row of the data. damn.
slice(1:8)
library(dplyr)
library(ROCR)
ncol(data)
data[,ncol(data)] %>% #this literally means get the last row of the data. damn.
slice(1)
library(tidyverse)
data = read.csv("~/Github/DSA1101 Slayers/datasets/Titanic.csv")
glimpse(data)
data$Survived = as.factor(data$Survived)
data$Sex = as.factor(data$Sex)
data$Class = as.factor(data$Class)
attach(data)
prop.table(table(Survived))
ProbY1 = prop.table(table(Survived))[[1]] #double bracket to remove the column name
ProbY0 = prop.table(table(Survived))[[2]]
ProbY1
ProbY0
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = prop.table(table(Class, Survived)); c
s = prop.table(table(Sex, Survived)); s
a = prop.table(table(Age, Survived)); a
#P(Xi = xi |Y = 1)
#Y1ting = rbind(c[,1],s[,1],a[,1])
#colnames(Y1ting)  = "P(Xi = xi |Y = 0)" #since no is the first column
#P(Xi = xi |Y = 0)
#Y2ting = rbind(c[,2],s[,2],a[,2])
#colnames(Y2ting) <- c("P(Xi = xi |Y = 1)")
#Y1ting
#Y2ting
#P(Y = survive |Age = Adult, Sex = Female, Class = 2nd)
Yum = ProbY1 * c[[2,2]] * s[[1,2]] * s[[1,2]]
NotYum = ProbY0 * c[[2,1]] * s[[1,1]] * s[[1,1]]
if (Yum > NotYum) {
print("more likely to survive")
} else {
print("death is inevitable")
}
library("e1071")
M1 <- naiveBayes(Survived ~ Age + Sex + Class, data)#, laplace=0)
newdata = cbind(Age = "Adult", Sex = "Female", Class = "2nd")
predict(M1, newdata = newdata, type = "class")
#prediction is the sameeeee
library(rpart)
library(rpart.plot)
M2 <- rpart(Survived ~ Age + Sex + Class,
method = "class",
data = data,
control = rpart.control(minsplit = 1),
parms = list(split = "information"))
summary(M2)
rpart.plot(M2, type = 4, extra = 2, clip.right.labs = FALSE)
library(dplyr)
library(ROCR)
ncol(data)
data[,ncol(data)] %>% #this literally means get the last row of the data. damn.
slice(1)
library(dplyr)
library(ROCR)
ncol(data)
data[, ncol(data)] %>% #this literally means get the last row of the data. damn.
slice(1)
library(dplyr)
library(ROCR)
ncol(data)
data[, ncol(data)]
#do NB first
nb_prediction = predict(M1,
newdata = data[,ncol(data)],
type = "raw")
dt_prediction = predict(M2,
newdata = data[,ncol(data)],
type = "raw")
library(dplyr)
library(ROCR)
ncol(data)
data[, ncol(data)] #this literally means get the last row of the data. damn.
#do NB first
nb_prediction = predict(M1,
newdata = data[,ncol(data)],
type = "raw")
dt_prediction = predict(M2,
newdata = data[,ncol(data)],
type = "raw")
library(dplyr)
library(ROCR)
ncol(data)
#data[, ncol(data)] #this literally means get the last row of the data. damn.
#do NB first
nb_prediction = predict(M1,
newdata = data[,ncol(data)],
type = "raw")
dt_prediction = predict(M2,
newdata = data[,ncol(data)],
type = "raw")
library(dplyr)
library(ROCR)
ncol(data)
#data[, ncol(data)] #this literally means get the last row of the data. damn.
#do NB first
nb_prediction = predict(M1,
newdata = data[,4],
type = "raw")
dt_prediction = predict(M2,
newdata = data[,4],
type = "raw")
library(dplyr)
library(ROCR)
ncol(data)
#data[, ncol(data)] #this literally means get the last row of the data. damn.
#do NB first
nb_prediction = predict(M1,
newdata = data[[,ncol(data)]],
type = "raw")
library(dplyr)
library(ROCR)
ncol(data)
data[, ncol(data)] #this literally means get the last row of the data. damn.
#do NB first
nb_prediction = predict(M1,
newdata = data[,ncol(data)],
type = "raw")
dt_prediction = predict(M2,
newdata = data[[,ncol(data)]],
type = "raw")
type(data[, ncol(data)]) #this literally means get the last row of the data. damn.
typeof(data[, ncol(data)]) #this literally means get the last row of the data. damn.
data[, ncol(data)] = as.factor(data[, ncol(data)]) #this literally means get the last row of the data. damn.
nb_prediction = predict(M1,
newdata = data[,ncol(data)],
type = "raw")
dt_prediction = predict(M2,
newdata = data[,ncol(data)],
type = "raw")
data[, ncol(data)] = as.character(data[, ncol(data)]) #this literally means get the last row of the data. damn.
nb_prediction = predict(M1,
newdata = data[,ncol(data)],
type = "raw")
dt_prediction = predict(M2,
newdata = data[,ncol(data)],
type = "raw")
library(dplyr)
library(ROCR)
ncol(data)
data[, ncol(data)] = as.character(data[, ncol(data)]) #this literally means get the last row of the data. damn.
newdata = data.frame(data[, ncol(data)])
#do NB first
nb_prediction = predict(M1,
newdata = data[,ncol(data)],
type = "raw")
dt_prediction = predict(M2,
newdata = data[,ncol(data)],
type = "raw")
library(dplyr)
library(ROCR)
ncol(data)
data[, ncol(data)] = as.character(data[, ncol(data)]) #this literally means get the last row of the data. damn.
newdata = data.frame(data[, ncol(data)])
#do NB first
nb_prediction = predict(M1,
newdata = newdata,
type = "raw")
dt_prediction = predict(M2,
newdata = newdata,
type = "raw")
ncol(data)
data[, ncol(data)] = as.character(data[, ncol(data)]) #this literally means get the last row of the data. damn.
newdata = data.frame(data[, ncol(data)])
library(dplyr)
library(ROCR)
ncol(data)
#do NB first
nb_prediction = predict(M1,
newdata = data[,-ncol(data)],
type = "raw")
dt_prediction = predict(M2,
newdata = data[,-ncol(data)],
type = "raw")
library(dplyr)
library(ROCR)
ncol(data)
#do NB first
nb_prediction = predict(M1,
newdata = data.frame(data[,-ncol(data)]),
type = "raw")
dt_prediction = predict(M2,
newdata = data.frame(data[,-ncol(data)]),
type = "raw")
dt_prediction = predict(M2, newdata = data.frame(data[,-ncol(data)]), type = "raw")
data.frame(data[,-ncol(data)]
)
typeof(data.frame(data[,-ncol(data)]))
data.frame(data[,-ncol(data)]
hdb = read.csv("~/Github/DSA1101 Slayers/datasets/hdbresale_cluster.csv.csv")
library(tidyverse)
hdb = read.csv("~/Github/DSA1101 Slayers/datasets/hdbresale_cluster.csv")
glimpse(hdb)
dim(hdb) #774 observations, 4 variables
table(hdb$flat_type)
attach(hdb)
plot(amenities, floor_area_sqm)
knitr::opts_chunk$set(echo = TRUE)
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = table(Class, Survived); c
library(tidyverse)
data = read.csv("~/Github/DSA1101 Slayers/datasets/Titanic.csv")
glimpse(data)
data$Survived = as.factor(data$Survived)
data$Sex = as.factor(data$Sex)
data$Class = as.factor(data$Class)
attach(data)
prop.table(table(Survived))
ProbY1 = prop.table(table(Survived))[[1]] #double bracket to remove the column name
ProbY0 = prop.table(table(Survived))[[2]]
ProbY1
ProbY0
#P(Xi = xi |Y = 1) = P(class = 3rd)
c = table(Class, Survived); c
s = table(Sex, Survived); s
a = table(Age, Survived); a
#completely wrong to use prop.table. we need to get the total divisible to be the entire dataset(?)
#c = table(Class, Survived)/rowSums();
#to add all rows: rowSums()
c = c[,2]/rowSums(c)
c = table(Class, Survived); c
s = table(Sex, Survived); s
a = table(Age, Survived); a
c[,2]/rowSums(c)
c/rowSums(c)
c/rowSums(c)
prop.table(c)
